import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from utils import formatar_valor_reais
import json
from datetime import datetime
import csv
import io

def initialize_session_state():
    if 'categorias' not in st.session_state:
        st.session_state.categorias = {
            "FORMA√á√ÉO": {"descricao": "Custos relacionados √† forma√ß√£o e treinamento", "cor": "#2ecc71"},
            "PRODU√á√ÉO ARENA": {"descricao": "Custos de produ√ß√£o e arena", "cor": "#e74c3c"},
            "PESSOAL": {"descricao": "Custos com pessoal e recursos humanos", "cor": "#3498db"},
            "INSUMOS": {"descricao": "Custos com insumos e materiais", "cor": "#f1c40f"}
        }
    
    if 'custos_data_initialized' not in st.session_state:
        st.session_state.custos_items = list(range(1, 31))
        st.session_state.custos_descricao = [
            "Educa+",
            "Verena (Online p/ pais)",
            "Carol",
            "Mamary",
            "Ver√¥nica - Atleta",
            "Luisa Hage",
            "Wilson e Marconi (Ed. Fisica)",
            "Cach√™ aulas da Plataforma (40 AULAS 10 PROFS)",
            "Frete e ajudantes para carregar e descarregar o caminh√£o",
            "Reformas, comunica√ß√£o visual,  pintura, materiais, etc",
            "Cach√™, Alimenta√ß√£o, Hospedagem, combust√≠vel equipe t√©cnica",
            "Hospedagem, alimenta√ß√£o e transporte palestrantes",
            "Cach√™ Monitores incluindo atendimento EJA, Uniformes",
            "Lucas - Social Media/ Relat√≥rios/ Faturamento",
            "Sidnei - Design Gr√°fico",
            "Iza - Financeiro",
            "Gilson - GEROP",
            "Rodrigo - Diretoria",
            "Fernando - Arena",
            "Malheiros - Juridico",
            "Tiago - filmaker",
            "Amanda - Contabilidade",
            "Diarista - Limpeza Escrit√≥rio (4x m√™s)",
            "Rafael - Aurea Conecta",
            "Aluguel escrit√≥rio",
            "Luz escrit√≥rio",
            "Internet escrit√≥rio",
            "Telefone - √Åurea",
            "Aluguel de Galp√£o",
            "Aluguel de Veiculo"
        ]
        st.session_state.custos_valores = [
            40000.00, 4500.00, 4500.00, 5500.00, 5500.00, 2000.00, 10000.00, 5000.00,
            15000.00, 4000.00, 16000.00, 6000.00, 7000.00,
            1000.00, 1500.00, 1000.00, 7000.00, 9000.00, 0.00, 7000.00, 10000.00, 850.00, 640.00, 3500.00,
            1700.00, 500.00, 280.00, 57.00, 1700.00, 5000.00
        ]
        st.session_state.custos_classificacao = [
            "POR CONTRATO", "POR CONTRATO", "POR CONTRATO", "POR CONTRATO", "POR CONTRATO", 
            "POR CONTRATO", "POR CONTRATO", "SAZONAL",
            "POR CONTRATO", "POR CONTRATO", "POR CONTRATO", "POR CONTRATO", "POR CONTRATO",
            "FIXO MENSAL", "FIXO MENSAL", "FIXO MENSAL", "POR CONTRATO", "POR CONTRATO",
            "POR CONTRATO", "POR CONTRATO", "POR CONTRATO", "FIXO MENSAL", "FIXO MENSAL", "FIXO MENSAL",
            "FIXO MENSAL", "FIXO MENSAL", "FIXO MENSAL", "FIXO MENSAL", "FIXO MENSAL", "SAZONAL"
        ]
        st.session_state.custos_categoria = [
            "FORMA√á√ÉO", "FORMA√á√ÉO", "FORMA√á√ÉO", "FORMA√á√ÉO", "FORMA√á√ÉO", "FORMA√á√ÉO", "FORMA√á√ÉO", "FORMA√á√ÉO",
            "PRODU√á√ÉO ARENA", "PRODU√á√ÉO ARENA", "PRODU√á√ÉO ARENA", "PRODU√á√ÉO ARENA", "PRODU√á√ÉO ARENA",
            "PESSOAL", "PESSOAL", "PESSOAL", "PESSOAL", "PESSOAL", "PESSOAL", "PESSOAL", 
            "PESSOAL", "PESSOAL", "PESSOAL", "PESSOAL",
            "INSUMOS", "INSUMOS", "INSUMOS", "INSUMOS", "INSUMOS", "INSUMOS"
        ]
        st.session_state.custos_data_initialized = True

def display_dashboard():
    st.subheader("Dashboard de Custos")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        total_custos = sum(st.session_state.custos_valores)
        st.metric("Total de Custos", formatar_valor_reais(total_custos))
    
    with col2:
        custos_fixos = sum([valor for i, valor in enumerate(st.session_state.custos_valores) 
                           if st.session_state.custos_classificacao[i] == "FIXO MENSAL"])
        st.metric("Custos Fixos", formatar_valor_reais(custos_fixos))
    
    with col3:
        custos_variaveis = total_custos - custos_fixos
        st.metric("Custos Vari√°veis", formatar_valor_reais(custos_variaveis))
    
    col1, col2 = st.columns(2)
    
    with col1:
        df_categoria = pd.DataFrame({
            "Categoria": st.session_state.custos_categoria,
            "Valor": st.session_state.custos_valores
        })
        fig_categoria = px.pie(
            df_categoria.groupby("Categoria").sum().reset_index(),
            values="Valor",
            names="Categoria",
            title="Distribui√ß√£o por Categoria",
            color="Categoria",
            color_discrete_map={cat: info["cor"] for cat, info in st.session_state.categorias.items()}
        )
        st.plotly_chart(fig_categoria, use_container_width=True)
    
    with col2:
        df_classificacao = pd.DataFrame({
            "Classifica√ß√£o": st.session_state.custos_classificacao,
            "Valor": st.session_state.custos_valores
        })
        cores_classificacao = {
            "FIXO MENSAL": "#27ae60",
            "POR CONTRATO": "#f39c12",
            "SAZONAL": "#c0392b"
        }
        fig_classificacao = px.pie(
            df_classificacao.groupby("Classifica√ß√£o").sum().reset_index(),
            values="Valor",
            names="Classifica√ß√£o",
            title="Distribui√ß√£o por Classifica√ß√£o",
            color="Classifica√ß√£o",
            color_discrete_map=cores_classificacao
        )
        st.plotly_chart(fig_classificacao, use_container_width=True)

def manage_categories():
    st.subheader("Gerenciamento de Categorias")
    
    with st.expander("Adicionar Nova Categoria", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            new_cat_nome = st.text_input("Nome da Categoria", key="new_cat_nome")
            new_cat_desc = st.text_input("Descri√ß√£o", key="new_cat_desc")
        with col2:
            new_cat_cor = st.color_picker("Cor", key="new_cat_cor")
        
        if st.button("Adicionar Categoria"):
            if new_cat_nome and new_cat_nome not in st.session_state.categorias:
                st.session_state.categorias[new_cat_nome] = {
                    "descricao": new_cat_desc,
                    "cor": new_cat_cor
                }
                st.success(f"Categoria '{new_cat_nome}' adicionada com sucesso!")
                st.rerun()
            elif not new_cat_nome:
                st.error("Por favor, insira um nome para a categoria.")
            else:
                st.error("Esta categoria j√° existe.")
    
    st.subheader("Categorias Existentes")
    
    for cat_nome, cat_info in st.session_state.categorias.items():
        with st.container():
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.markdown(f"**{cat_nome}**")
                st.caption(cat_info["descricao"])
            
            with col2:
                novo_cor = st.color_picker("Cor", cat_info["cor"], key=f"cor_{cat_nome}")
                if novo_cor != cat_info["cor"]:
                    st.session_state.categorias[cat_nome]["cor"] = novo_cor
            
            with col3:
                if st.button("üóëÔ∏è", key=f"del_{cat_nome}"):
                    if cat_nome in [cat for cat in st.session_state.custos_categoria]:
                        st.error("N√£o √© poss√≠vel excluir uma categoria em uso.")
                    else:
                        del st.session_state.categorias[cat_nome]
                        st.success(f"Categoria '{cat_nome}' exclu√≠da com sucesso!")
                        st.rerun()
            
            st.divider()

def display_items():
    st.subheader("Cadastro e Edi√ß√£o de Itens")
    
    with st.expander("Adicionar Novo Item", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            new_descricao = st.text_input("Descri√ß√£o do Item")
            new_valor = st.number_input("Valor (R$)", min_value=0.0, format="%.2f")
        
        with col2:
            new_categoria = st.selectbox("Categoria", 
                                       options=sorted(st.session_state.categorias.keys()))
            new_classificacao = st.selectbox("Classifica√ß√£o",
                                           options=["FIXO MENSAL", "POR CONTRATO", "SAZONAL"])
        
        if st.button("Adicionar Item"):
            if new_descricao:
                st.session_state.custos_items.append(len(st.session_state.custos_items) + 1)
                st.session_state.custos_descricao.append(new_descricao)
                st.session_state.custos_valores.append(new_valor)
                st.session_state.custos_classificacao.append(new_classificacao)
                st.session_state.custos_categoria.append(new_categoria)
                st.success(f"Item '{new_descricao}' adicionado com sucesso!")
                st.rerun()
            else:
                st.error("Por favor, preencha a descri√ß√£o do item.")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_term = st.text_input("üîç Buscar por descri√ß√£o", "")
    
    with col2:
        filter_categoria = st.multiselect(
            "Filtrar por Categoria",
            options=sorted(set(st.session_state.custos_categoria)),
            default=[]
        )
    
    with col3:
        filter_classificacao = st.multiselect(
            "Filtrar por Classifica√ß√£o",
            options=sorted(set(st.session_state.custos_classificacao)),
            default=[]
        )
    
    df = pd.DataFrame({
        "ITEM": st.session_state.custos_items,
        "DESCRI√á√ÉO": st.session_state.custos_descricao,
        "VALOR": st.session_state.custos_valores,
        "CLASSIFICA√á√ÉO": st.session_state.custos_classificacao,
        "CATEGORIA": st.session_state.custos_categoria
    })
    
    if search_term:
        df = df[df["DESCRI√á√ÉO"].str.contains(search_term, case=False)]
    if filter_categoria:
        df = df[df["CATEGORIA"].isin(filter_categoria)]
    if filter_classificacao:
        df = df[df["CLASSIFICA√á√ÉO"].isin(filter_classificacao)]
    
    st.write("### Itens Cadastrados")
    
    view_type = st.radio("Tipo de Visualiza√ß√£o", ["Cards", "Tabela"], horizontal=True)
    
    if view_type == "Cards":
        for _, item in df.iterrows():
            with st.container():
                col1, col2, col3 = st.columns([3, 2, 1])
                
                with col1:
                    st.markdown(f"**{item['DESCRI√á√ÉO']}**")
                    st.caption(f"Categoria: {item['CATEGORIA']}")
                
                with col2:
                    st.markdown(f"**{formatar_valor_reais(item['VALOR'])}**")
                    st.caption(f"Classifica√ß√£o: {item['CLASSIFICA√á√ÉO']}")
                
                with col3:
                    if st.button("üóëÔ∏è", key=f"del_item_{item['ITEM']}"):
                        idx = st.session_state.custos_items.index(item['ITEM'])
                        del st.session_state.custos_items[idx]
                        del st.session_state.custos_descricao[idx]
                        del st.session_state.custos_valores[idx]
                        del st.session_state.custos_classificacao[idx]
                        del st.session_state.custos_categoria[idx]
                        st.success("Item exclu√≠do com sucesso!")
                        st.rerun()
                
                st.divider()
    else:
        st.dataframe(
            df.style.apply(highlight_classificacao, axis=None),
            column_config={
                "ITEM": st.column_config.NumberColumn("ITEM", format="%d"),
                "DESCRI√á√ÉO": st.column_config.TextColumn("DESCRI√á√ÉO"),
                "VALOR": st.column_config.NumberColumn("VALOR", format="R$ %.2f"),
                "CLASSIFICA√á√ÉO": st.column_config.TextColumn("CLASSIFICA√á√ÉO"),
                "CATEGORIA": st.column_config.TextColumn("CATEGORIA"),
            },
            hide_index=True,
            use_container_width=True
        )

def display_reports():
    st.subheader("Relat√≥rios e An√°lises")
    
    st.write("### An√°lise Temporal")
    periodo = st.selectbox("Per√≠odo de An√°lise", ["Mensal", "Trimestral", "Anual"])
    
    dados_temporais = pd.DataFrame({
        "Per√≠odo": ["Jan", "Fev", "Mar", "Abr"],
        "Custos Totais": [sum(st.session_state.custos_valores)] * 4
    })
    
    fig_temporal = px.line(
        dados_temporais,
        x="Per√≠odo",
        y="Custos Totais",
        title="Evolu√ß√£o dos Custos",
        markers=True
    )
    st.plotly_chart(fig_temporal, use_container_width=True)
    
    st.write("### An√°lise por Categoria")
    categoria_analise = st.selectbox("Selecione a Categoria", 
                                   options=sorted(st.session_state.categorias.keys()))
    
    df_categoria = pd.DataFrame({
        "Descri√ß√£o": [desc for i, desc in enumerate(st.session_state.custos_descricao)
                     if st.session_state.custos_categoria[i] == categoria_analise],
        "Valor": [valor for i, valor in enumerate(st.session_state.custos_valores)
                 if st.session_state.custos_categoria[i] == categoria_analise]
    })
    
    if not df_categoria.empty:
        fig_categoria = px.bar(
            df_categoria,
            x="Descri√ß√£o",
            y="Valor",
            title=f"Custos da Categoria {categoria_analise}",
            color_discrete_sequence=[st.session_state.categorias[categoria_analise]["cor"]]
        )
        fig_categoria.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_categoria, use_container_width=True)
    else:
        st.info(f"N√£o h√° itens cadastrados na categoria {categoria_analise}")

def display_settings():
    st.subheader("Configura√ß√µes")
    
    st.write("### Exportar Dados")
    export_format = st.radio("Formato de Exporta√ß√£o", ["CSV", "JSON"], horizontal=True)
    
    if st.button("Exportar Dados"):
        if export_format == "CSV":
            df = pd.DataFrame({
                "ITEM": st.session_state.custos_items,
                "DESCRI√á√ÉO": st.session_state.custos_descricao,
                "VALOR": st.session_state.custos_valores,
                "CLASSIFICA√á√ÉO": st.session_state.custos_classificacao,
                "CATEGORIA": st.session_state.custos_categoria
            })
            csv = df.to_csv(index=False)
            st.download_button(
                "Download CSV",
                csv,
                "custos.csv",
                "text/csv",
                key='download-csv'
            )
        else:
            data = {
                "categorias": st.session_state.categorias,
                "itens": {
                    "items": st.session_state.custos_items,
                    "descricao": st.session_state.custos_descricao,
                    "valores": st.session_state.custos_valores,
                    "classificacao": st.session_state.custos_classificacao,
                    "categoria": st.session_state.custos_categoria
                }
            }
            json_str = json.dumps(data, indent=2)
            st.download_button(
                "Download JSON",
                json_str,
                "custos.json",
                "application/json",
                key='download-json'
            )
    
    st.write("### Importar Dados")
    uploaded_file = st.file_uploader("Escolha um arquivo para importar", type=['csv', 'json'])
    
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
                st.session_state.custos_items = df["ITEM"].tolist()
                st.session_state.custos_descricao = df["DESCRI√á√ÉO"].tolist()
                st.session_state.custos_valores = df["VALOR"].tolist()
                st.session_state.custos_classificacao = df["CLASSIFICA√á√ÉO"].tolist()
                st.session_state.custos_categoria = df["CATEGORIA"].tolist()
            else:
                data = json.load(uploaded_file)
                st.session_state.categorias = data["categorias"]
                st.session_state.custos_items = data["itens"]["items"]
                st.session_state.custos_descricao = data["itens"]["descricao"]
                st.session_state.custos_valores = data["itens"]["valores"]
                st.session_state.custos_classificacao = data["itens"]["classificacao"]
                st.session_state.custos_categoria = data["itens"]["categoria"]
            
            st.success("Dados importados com sucesso!")
            st.rerun()
        except Exception as e:
            st.error(f"Erro ao importar dados: {str(e)}")

def display_accounting_costs():
    initialize_session_state()
    
    st.header("Gest√£o de Custos")
    st.caption("Sistema de gest√£o e an√°lise de custos operacionais")
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Dashboard",
        "üè∑Ô∏è Categorias",
        "üìù Itens",
        "üìà Relat√≥rios",
        "‚öôÔ∏è Configura√ß√µes"
    ])
    
    with tab1:
        display_dashboard()
    
    with tab2:
        manage_categories()
    
    with tab3:
        display_items()
    
    with tab4:
        display_reports()
    
    with tab5:
        display_settings()

def highlight_classificacao(df):
    cores = {
        "FIXO MENSAL": "background-color: rgba(0, 128, 0, 0.2)",
        "POR CONTRATO": "background-color: rgba(255, 215, 0, 0.2)",
        "SAZONAL": "background-color: rgba(255, 99, 71, 0.2)"
    }
    
    estilo = pd.DataFrame('', index=df.index, columns=df.columns)
    
    for i, valor in enumerate(df['CLASSIFICA√á√ÉO']):
        estilo.iloc[i, :] = cores.get(valor, '')
    
    return estilo